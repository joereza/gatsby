{
  "compilerOptions": {
    /* Language and Environment */
    "target": "esnext",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": [
      "DOM",
      "ESNext"
    ],
    "jsx": "preserve",                                   /* Specify what JSX code is generated. */

    /* Modules */
    "module": "esnext",                                /* Specify what module code is generated. */
    "moduleResolution": "node",                          /* Specify how TypeScript looks up a file from a given module specifier. */
    "baseUrl": "./src",                                  /* Specify the base directory to resolve non-relative module names. */
    "types": [
      "node",
      "react",
      "react-dom",
      "styled-components"
    ],

    /* JavaScript Support */
    "allowJs": true,                                     /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    "checkJs": false,                                    /* Enable error reporting in type-checked JavaScript files. */

    /* Emit */
    "declaration": false,                                /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "noEmit": true,

    /* Interop Constraints */
    "isolatedModules": true,                             /* Ensure that each file can be safely transpiled without relying on other imports. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    "noUnusedLocals": false,                             /* Enable error reporting when a local variables aren't read. */
    "noUnusedParameters": false,                         /* Raise an error when a function parameter isn't read */
    "noUncheckedIndexedAccess": false,                   /* Include 'undefined' in index signature results */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    "**/*.js",
    "**/*.jsx"
  ],
  "exclude": ["node_modules/*", "public/*"]
}